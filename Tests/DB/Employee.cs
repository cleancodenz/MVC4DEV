//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Tests.DB
{
    public partial class Employee
    {
        #region Primitive Properties
    
        public virtual int EmployeeID
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual string TitleOfCourtesy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> BirthDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> HireDate
        {
            get;
            set;
        }
    
        public virtual string Address
        {
            get;
            set;
        }
    
        public virtual string City
        {
            get;
            set;
        }
    
        public virtual string Region
        {
            get;
            set;
        }
    
        public virtual string PostalCode
        {
            get;
            set;
        }
    
        public virtual string Country
        {
            get;
            set;
        }
    
        public virtual string HomePhone
        {
            get;
            set;
        }
    
        public virtual string Extension
        {
            get;
            set;
        }
    
        public virtual byte[] Photo
        {
            get;
            set;
        }
    
        public virtual string Notes
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ReportsTo
        {
            get { return _reportsTo; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_reportsTo != value)
                    {
                        if (Employee1 != null && Employee1.EmployeeID != value)
                        {
                            Employee1 = null;
                        }
                        _reportsTo = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _reportsTo;
    
        public virtual string PhotoPath
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Employee> Employees1
        {
            get
            {
                if (_employees1 == null)
                {
                    var newCollection = new FixupCollection<Employee>();
                    newCollection.CollectionChanged += FixupEmployees1;
                    _employees1 = newCollection;
                }
                return _employees1;
            }
            set
            {
                if (!ReferenceEquals(_employees1, value))
                {
                    var previousValue = _employees1 as FixupCollection<Employee>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployees1;
                    }
                    _employees1 = value;
                    var newValue = value as FixupCollection<Employee>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployees1;
                    }
                }
            }
        }
        private ICollection<Employee> _employees1;
    
        public virtual Employee Employee1
        {
            get { return _employee1; }
            set
            {
                if (!ReferenceEquals(_employee1, value))
                {
                    var previousValue = _employee1;
                    _employee1 = value;
                    FixupEmployee1(previousValue);
                }
            }
        }
        private Employee _employee1;
    
        public virtual ICollection<Order> Orders
        {
            get
            {
                if (_orders == null)
                {
                    var newCollection = new FixupCollection<Order>();
                    newCollection.CollectionChanged += FixupOrders;
                    _orders = newCollection;
                }
                return _orders;
            }
            set
            {
                if (!ReferenceEquals(_orders, value))
                {
                    var previousValue = _orders as FixupCollection<Order>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrders;
                    }
                    _orders = value;
                    var newValue = value as FixupCollection<Order>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrders;
                    }
                }
            }
        }
        private ICollection<Order> _orders;
    
        public virtual ICollection<Territory> Territories
        {
            get
            {
                if (_territories == null)
                {
                    var newCollection = new FixupCollection<Territory>();
                    newCollection.CollectionChanged += FixupTerritories;
                    _territories = newCollection;
                }
                return _territories;
            }
            set
            {
                if (!ReferenceEquals(_territories, value))
                {
                    var previousValue = _territories as FixupCollection<Territory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTerritories;
                    }
                    _territories = value;
                    var newValue = value as FixupCollection<Territory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTerritories;
                    }
                }
            }
        }
        private ICollection<Territory> _territories;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupEmployee1(Employee previousValue)
        {
            if (previousValue != null && previousValue.Employees1.Contains(this))
            {
                previousValue.Employees1.Remove(this);
            }
    
            if (Employee1 != null)
            {
                if (!Employee1.Employees1.Contains(this))
                {
                    Employee1.Employees1.Add(this);
                }
                if (ReportsTo != Employee1.EmployeeID)
                {
                    ReportsTo = Employee1.EmployeeID;
                }
            }
            else if (!_settingFK)
            {
                ReportsTo = null;
            }
        }
    
        private void FixupEmployees1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Employee item in e.NewItems)
                {
                    item.Employee1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Employee item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee1, this))
                    {
                        item.Employee1 = null;
                    }
                }
            }
        }
    
        private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Order item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Order item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }
    
        private void FixupTerritories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Territory item in e.NewItems)
                {
                    if (!item.Employees.Contains(this))
                    {
                        item.Employees.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Territory item in e.OldItems)
                {
                    if (item.Employees.Contains(this))
                    {
                        item.Employees.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
