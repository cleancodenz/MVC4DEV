<script src="../../Scripts/knockout-2.1.0.js" type="text/javascript"></script>
@model MyCompany.UI.Data.Model.Product
@{
    string indexURL = @Url.Action("products", "api");

    ViewBag.Title = "Knockout Product Inquiry";
}
<p>
    DFDDDD</p>
<table cellspacing="0" cellpadding="0">
    <thread>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id);
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name);
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Category);
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price);
            </th>
            <th></th>
        </tr>
    </thread>
    <tbody data-bind="foreach: products">
        <tr>
            <td data-bind="text : Id">
            </td>
            <td>
                <input data-bind="value : Name">
            </td>
            <td>
                <input data-bind="value : Category">
            </td>
            <td>
                <input data-bind="value : Price">
            </td>
            <td>
                <button data-bind="click: $root.deleteProduct">
                    Delete</button>
                <button data-bind="click: $root.saveProduct">
                    save</button>
            </td>
        </tr>
    </tbody>
</table>
<div>
    <button data-bind="click: addProduct">
        New</button>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/knockout")
    <script type="text/javascript">

        var ns = new function () {

            var namespace = this;
            // define a class
            namespace.productModel = function (product) {
                var self = this;

                if (product) {
                    self.Id = ko.observable(product.Id);
                    self.Name = ko.observable(product.Name);
                    self.Category = ko.observable(product.Category);
                    self.Price = ko.observable(product.Price);
                }
                else {
                    self.Id = ko.observable(0);
                    self.Name = ko.observable();
                    self.Category = ko.observable();
                    self.Price = ko.observable();
                }
            }

            namespace.ViewModel = function () {
                var self = this;
                self.products = ko.observableArray([]);

                self.deleteProduct = function (product) {

                }
                self.saveProduct = function (product) {
                    namespace.saveProduct(product);
                }

                self.addProduct = function () {
                    self.products.push(
                    new namespace.productModel());
                }

            }

            namespace.getProducts = function (viewModel) {
                // to populate the model
                $.ajax("@indexURL",
                 {
                     type: "get",
                     contentType: "application/json",
                     success: function (result) {
                         $.map(result,
                              function (item) {
                                  viewModel.products.push(new namespace.productModel(item))
                              });
                     }
                 });
            }

            namespace.saveProduct = function (product) {
                // to populate the model
                if (product.Id === 0) {
                    // this is new
                    $.ajax("@indexURL",
                        { data: ko.toJSON(product),
                            type: "POST",
                            contentType: "application/json",
                            success: function (result) {
                                product.Id(result.)
                             }
                        });
                }

                else {
                    // this is update

                    $.ajax("@indexURL",
                   { data: ko.toJSON(product),
                       type: "PUT",
                       contentType: "application/json",
                       success: function (result) { alert(result) }
                   });
                }

            }

        }
        $(function () {

            var viewmodel = new ns.ViewModel();
         
            ns.getProducts(viewmodel);

            ko.applyBindings(viewmodel);

        });
    </script>
}
